#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>


#define DEFAULT 0
#define KP   1
#define FN   2
#define MOD   3
#define QWERTY   4
#define SHIFT_LAYER   5
#define SYMBOL_LAYER   6
#define OS   7
#define CODE   8



/ {
    combos {
        compatible = "zmk,combos";
        combo_save {
            timeout-ms = <50>;
            key-positions = <30 31 32>;
            bindings = <&kp LG(S)>;
        };
        combo_enter {
            timeout-ms = <50>;
            key-positions = <41 42 43>;
            bindings = <&kp ENTER>;
        };
    };
    behaviors {
      #include "macros.dtsi"

      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS";
          #binding-cells = <2>;
          tapping-term-ms = <200>;
          quick_tap_ms = <175>;
          flavor = "tap-preferred";
          bindings = <&kp>, <&kp>;
      };
      mo_tog: behavior_mo_tog {
          compatible = "zmk,behavior-hold-tap";
          label = "mo_tog";
          #binding-cells = <2>;
          flavor = "hold-preferred";
          tapping-term-ms = <200>;
          bindings = <&mo>, <&tog>;
      };
      bspc_del: backspace_delete {
          compatible = "zmk,behavior-mod-morph";
          label = "BACKSPACE_DELETE";
          #binding-cells = <0>;
          bindings = <&kp BACKSPACE>, <&kp DELETE>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
          keep-mods = <(MOD_RSFT)>;
      };
      td_cap: tap_dance_cap {
          compatible = "zmk,behavior-tap-dance";
          label = "TAP_DANCE_CAP";
          #binding-cells = <0>;
          tapping-term-ms = <200>;
          bindings = <&mo SHIFT_LAYER>, <&caps_word>, <&kp CAPSLOCK>;
      };
      td_kp: tap_dance_kp {
          compatible = "zmk,behavior-tap-dance";
          label = "TAP_DANCE_KP";
          #binding-cells = <0>;
          tapping-term-ms = <200>;
          bindings = <&mo KP>, <&tog KP>;
      };
      gresc: grave_escape {
          compatible = "zmk,behavior-mod-morph";
          label = "GRAVE_ESCAPE";
          #binding-cells = <0>;
          bindings = <&kp ESC>, <&kp GRAVE>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      one: one {
          compatible = "zmk,behavior-mod-morph";
          label = "one_lt";
          #binding-cells = <0>;
          bindings = <&kp N1>, <&kp LESS_THAN>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      two: two {
          compatible = "zmk,behavior-mod-morph";
          label = "two_gt";
          #binding-cells = <0>;
          bindings = <&kp N2>, <&kp GREATER_THAN>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      three: three {
          compatible = "zmk,behavior-mod-morph";
          label = "three_question";
          #binding-cells = <0>;
          bindings = <&kp N3>, <&kp QUESTION>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      comma_exclamation: comma_exclamation {
          compatible = "zmk,behavior-mod-morph";
          label = "comma_exclamation";
          #binding-cells = <0>;
          bindings = <&kp COMMA>, <&kp EXCLAMATION>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      dot_equal: dot_equal {
          compatible = "zmk,behavior-mod-morph";
          label = "dot_equal";
          #binding-cells = <0>;
          bindings = <&kp DOT>, <&kp KP_EQUAL>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      colon_backslash: colon_backslash {
          compatible = "zmk,behavior-mod-morph";
          label = "colon_backslash";
          #binding-cells = <0>;
          bindings = <&kp COLON>, <&kp BACKSLASH>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      left_home: left_home {
          compatible = "zmk,behavior-mod-morph";
          label = "left_home";
          #binding-cells = <0>;
          bindings = <&kp LEFT>, <&kp HOME>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };
      right_end: right_end {
          compatible = "zmk,behavior-mod-morph";
          label = "right_end";
          #binding-cells = <0>;
          bindings = <&kp RIGHT>, <&kp END>;
          mods = <(MOD_LSFT|MOD_RSFT)>;
        };

    };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &none &one    &two   &three   &kp LEFT_BRACKET     &kp LPAR &tog KP                                                                       &mo MOD &kp RPAR &kp RIGHT_BRACKET &kp STAR    &kp DOLLAR   &kp N0   &tog KP
        &kp TAB   &kp SQT   &comma_exclamation &dot_equal  &kp P &kp Y   &kp LA(LC(N))                                                                        &kp LA(SPACE) &kp F     &kp G     &kp C    &kp R &kp L &kp SLASH
        &mt LCTRL ESC &kp A       &kp O     &kp E    &kp U &kp I  &sl SHIFT_LAYER           &sl SHIFT_LAYER &kp LA(LS(LGUI))             &kp LGUI  &kp RCTRL           &kp LG(S) &kp D     &kp H     &kp T    &kp N &kp S &lt FN MINUS
        &td_cap &colon_backslash   &kp Q     &kp J    &kp K &kp X         &none    &none     &kp LG(SPACE) &none &none &kp PG_UP &none     &none           &kp B     &kp M     &kp W    &kp V &kp Z &td_cap
        &mo_tog KP KP     &kp GRAVE &kp LALT &kp LGUI &lt FN UNDER               &kp SPACE &mo SYMBOL_LAYER   &kp LA(SPACE)              &kp PG_DN &mo FN &kp BACKSPACE            &kp ENTER  &left_home &right_end  &caps_word &mo FN
      >;
    };
    keypad {
      bindings = <
        &kp LG(W) &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &trans                                                                       &mo MOD &kp DOLLAR &none &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &none
        &kp LG(TAB)   &kp LG(LS(Z))     &kp LC(LEFT)    &kp LC(UP)    &kp LC(RIGHT)      &kp LA(SPACE)  &none                                                                        &none &kp KP_DIVIDE  &kp N7  &kp N8    &kp N9     &kp KP_MINUS    &kp BSLH
        &kp ESC   &kp LG(A)     &kp LS(LC(TAB))    &kp D    &kp LC(TAB)      &kp G  &none           &kp LCTRL &kp LALT             &kp LGUI  &kp RCTRL           &none &kp KP_MULTIPLY  &kp N4  &kp N5    &kp N6     &kp KP_PLUS     &kp SQT
        &kp LA(LS(SPACE)) &kp LG(Z)     &kp LG(X)    &kp LG(C)    &kp LG(V)      &kp LG(LS(Z))        &none    &none     &kp HOME &none &none &kp PG_UP &none     &none           &kp N0  &kp N1  &kp N2    &kp N3     &kp KP_ENTER    &kp RSHFT
        &mo_tog KP KP     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp SPACE &kp ENTER   &kp END              &kp PG_DN &kp DEL &kp KP_N0              &kp UP     &kp DOWN     &kp KP_DOT    &kp RBKT        &mo FN
      >;
    };
    fn {
      bindings = <
        &kp LG(W) &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &tog KP                                                       &mo 3 &macro_gmail &macro_psu &kp F9 &kp F10 &kp F11 &kp F12
        &kp LG(TAB)  &kp PG_UP &kp LA(LEFT) &kp UP &kp LA(RIGHT) &macro_select_line &none                                                       &none &trans &trans &trans &trans  &kp LG(SLASH)  &trans
        &trans  &kp PG_DN &kp LEFT &kp DOWN &kp RIGHT &macro_select_word &none        &trans &trans             &trans &trans        &none &trans &trans &trans &trans  &trans  &trans
        &trans &kp LG(Z) &kp LG(X) &kp LG(C) &kp LG(V) &trans        &none  &none  &trans &none &none &trans &none  &none        &trans &trans &trans &trans  &trans  &trans
        &trans &trans &trans &trans &trans               &trans &trans &trans             &trans &trans &trans              &trans &trans &trans  &trans  &trans
      >;
    };
    mod {
      bindings = <
        &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none                                                                                                          &trans                 &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &none
        &none &none        &none        &none        &none        &none        &bootloader                                                                                                    &bootloader            &none        &none        &none        &none        &none        &none
        &none &none        &none        &none        &none        &none        &rgb_ug RGB_MEFS_CMD 5                 &bt BT_CLR &bt BT_CLR             &bt BT_CLR &bt BT_CLR                 &rgb_ug RGB_MEFS_CMD 5 &none        &none        &none        &none        &none        &none
        &none &none        &none        &none        &none        &none                               &none           &none      &none      &none &none &none      &none      &none                                  &none        &none        &none        &none        &none        &none
        &none &none        &none        &bl BL_INC   &bl BL_DEC                                       &rgb_ug RGB_TOG &bl BL_TOG &none                  &none      &bl BL_TOG &rgb_ug RGB_TOG                                     &bl BL_INC   &bl BL_DEC   &none        &none        &none
      >;
    };
    qwerty_layer {
      bindings = <
        &kp EQUAL &kp N1    &kp N2   &kp N3   &kp N4     &kp N5 &tog KP                                                                       &mo MOD &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &kp MINUS
        &kp TAB   &kp Q     &kp W    &kp E    &kp R      &kp T  &none                                                                        &none &kp Y  &kp U  &kp I     &kp O    &kp P    &kp BSLH
        &kp ESC   &kp A     &kp S    &kp D    &kp F      &kp G  &none           &kp LCTRL &kp LALT             &kp LGUI  &kp RCTRL           &none &kp H  &kp J  &kp K     &kp L    &kp SEMI &kp SQT
        &kp LSHFT &kp Z     &kp X    &kp C    &kp V      &kp B         &none    &none     &kp HOME &none &none &kp PG_UP &none     &none           &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT
        &mo FN     &kp GRAVE &kp CAPS &kp LEFT &kp RIGHT                &kp BSPC &kp DEL   &kp END              &kp PG_DN &kp ENTER &kp SPACE              &kp UP &kp DOWN  &kp LBKT &kp RBKT &mo FN
      >;
    };
    shift_layer {
      bindings = <
        &kp SEMI &kp LESS_THAN    &kp GREATER_THAN   &kp QUESTION   &kp LS(LEFT_BRACKET)     &kp PERCENT &tog KP                                                                       &mo MOD &kp CARET &kp LS(RIGHT_BRACKET) &kp STAR    &kp N9   &kp N0   &tog KP
        &kp LS(TAB)   &kp LS(SQT)   &kp EXCLAMATION &kp EQUAL  &kp LS(P) &kp LS(Y)   &kp LA(LC(N))                                                                        &kp LA(SPACE) &kp LS(F)     &kp LS(G)     &kp LS(C)    &kp LS(R) &kp LS(L) &kp LS(BSLH)
        &mt LCTRL ESC &kp LS(A)       &kp LS(O)     &kp LS(E)    &kp LS(U) &kp LS(I)  &sk LSHFT           &sk LSHFT &kp LALT             &kp LGUI  &kp RCTRL           &kp LG(S) &kp LS(D)     &kp LS(H)     &kp LS(T)    &kp LS(N) &kp LS(S) &lt FN UNDER
        &td_cap &kp BACKSLASH   &kp LS(Q)     &kp LS(J)    &kp LS(K) &kp LS(X)         &none    &none     &kp HOME &none &none &kp PG_UP &none     &none           &kp LS(B)     &kp LS(M)     &kp LS(W)    &kp LS(V) &kp LS(Z) &td_cap
        &mo KP     &kp LS(GRAVE) &kp LALT &mo_tog FN FN &kp LGUI                &kp SPACE &mo FN   &kp END              &kp PG_DN &kp ENTER &kp DELETE              &left_home &right_end  &kp LBKT &kp RBKT &mo FN
      >;
    };
    sym_layer {
      bindings = <
        &kp SEMI &kp LESS_THAN    &kp GREATER_THAN   &kp QUESTION   &kp LS(LEFT_BRACKET)     &kp PERCENT &tog KP                                                                       &mo MOD &kp CARET &kp LS(RIGHT_BRACKET) &kp STAR    &kp N9   &kp N0   &tog KP
        &kp LS(TAB)   &kp LS(SQT)   &kp EXCLAMATION &kp EQUAL  &kp LS(P) &kp LS(Y)   &kp LA(LC(N))                                                                        &kp LA(SPACE) &kp LESS_THAN     &kp LS(LEFT_BRACKET)     &kp LS(RIGHT_BRACKET)    &kp GREATER_THAN &kp PIPE &kp LS(BSLH)
        &mt LCTRL ESC &kp LS(A)       &kp LS(O)     &kp LS(E)    &kp LS(U) &kp LS(I)  &sk LSHFT           &sk LSHFT &kp LALT             &kp LGUI  &kp RCTRL           &kp LG(S) &kp LEFT_BRACKET     &kp LPAR     &kp RPAR    &kp RIGHT_BRACKET &kp AMPERSAND &lt FN MINUS
        &td_cap &kp BACKSLASH   &kp LS(Q)     &kp LS(J)    &kp LS(K) &kp LS(X)         &none    &none     &kp HOME &none &none &kp PG_UP &none     &none           &kp GRAVE     &kp TILDE     &kp HASH    &kp AT &kp SEMICOLON &td_cap
        &mo KP     &kp GRAVE &kp LALT &mo_tog FN FN &kp LGUI                &kp SPACE &mo FN   &kp END              &kp PG_DN &kp ENTER &bspc_del              &kp PLUS &kp STAR  &kp SLASH &kp PERCENT &mo FN
      >;
    };
  };
};
